Gemini: Here's a breakdown of the `index` function implementation into progressive levels of difficulty, focusing on understanding the concepts and building incrementally:

**Level 1: Basic Data Retrieval and Display**

*   **Goal:** Retrieve the user's cash balance and display it.  This is the simplest starting point.
*   **Tasks:**
    *   Get the `user_id` from the session.
    *   Execute a SQL query to retrieve the user's cash balance from the `users` table.
    *   Render a basic HTML template that displays the cash balance.  Don't worry about any tables or stock information yet.

**Level 2: User's Stock Holdings (Basic)**

*   **Goal:** Retrieve and display the user's stock holdings (symbol and shares).  Ignore current prices and total values for now.
*   **Tasks:**
    *   Execute a SQL query to retrieve the user's transactions from the `transactions` table, grouped by `symbol` and summed to get the total shares owned for each stock.  Use `GROUP BY`, `SUM()`, and `HAVING SUM(shares) > 0` to filter out stocks with zero shares.
    *   Extend the HTML template to display a table with columns for "Symbol" and "Shares".  Populate the table with the data from the SQL query.

**Level 3: Current Stock Prices**

*   **Goal:** Fetch and display the current price for each stock the user owns.
*   **Tasks:**
    *   Inside a loop that iterates through the results from the stock holdings query (Level 2), call the `lookup()` function for each `symbol` to get the current price.
    *   Add a "Price" column to the HTML table and populate it with the price from `lookup()`.

**Level 4: Total Value of Holdings**

*   **Goal:** Calculate and display the total value of each stock holding (shares * price).
*   **Tasks:**
    *   Inside the loop (Level 3), calculate the total value for each stock.
    *   Add a "Total" column to the HTML table and populate it with the calculated value.

**Level 5: Grand Total and Formatting**

*   **Goal:** Calculate and display the grand total (cash + total value of all holdings) and format currency values.
*   **Tasks:**
    *   Calculate the total value of all holdings by summing the "Total" values calculated in Level 4.
    *   Calculate the grand total.
    *   Use the `usd()` helper function (if available) to format cash, price, and total values in the HTML template.
    *   Display the grand total in the HTML template.

**Level 6: Error Handling and Edge Cases**

*   **Goal:** Add error handling and address potential edge cases.
*   **Tasks:**
    *   Handle cases where the `lookup()` function returns `None` (e.g., if the API is unavailable).  Display an appropriate message to the user.
    *   Handle potential database errors using `try...except` blocks.
    *   Consider any other edge cases that might occur (e.g., empty portfolio).

**Level 7: Pagination (Optional)**

*   **Goal:** Implement pagination if the user has a large number of stock holdings.
*   **Tasks:**
    *   Add logic to limit the number of holdings displayed per page.
    *   Add navigation controls (e.g., "Next Page", "Previous Page").
    *   Pass the necessary pagination information to the HTML template.

This breakdown allows you to tackle the `index` function step by step, building a solid understanding of each part before moving on to the next.  Start with Level 1 and gradually work your way up.  Test thoroughly after completing each level.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

github Copilot: Here's how index function can be divided into levels of difficulty so you can progressively build and understand it:
   ---

   ### **Level 1: Basic Structure**
   - Focus on the basic `GET` handling.
   - Display a simple portfolio page.
   - Validate if the user is logged in.
   #### Tasks:
   1. Handle `GET` requests to display the `index.html` page.
   2. Ensure the user is logged in.
   3. Display a placeholder message or table.

   ---

   ### **Level 2: Retrieve User's Portfolio**
   - Add logic to retrieve the user's portfolio from the database.
   - Display the stocks owned by the user.
   #### Tasks:
   1. Query the `transactions` table to get the user's stocks.
   2. Calculate the total value of each stock.
   3. Display the stocks in a table format.

   ---

   ### **Level 3: Calculate Total Portfolio Value**
   - Calculate the total value of the user's portfolio.
   - Include the user's cash balance in the total value.
   #### Tasks:
   1. Retrieve the user's cash balance from the `users` table.
   2. Sum the value of all stocks and cash.
   3. Display the total portfolio value.

   ---

   ### **Level 4: Handle Errors Gracefully**
   - Add error handling for:
      - Missing or invalid data.
      - Database query errors.
      - Unexpected issues (e.g., network problems).

   #### Tasks:
   1. Wrap the database logic in `try-except` blocks.
   2. Display a generic error message if something unexpected occurs.
   ---